#tag ClassProtected Class bz2	#tag Method, Flags = &h0		Sub Compress(fileIn As FolderItem, fileOut As String)		  // FILE * fopen ( const char * filename, const char * mode );		  Soft Declare Function fopen Lib kStdLib (filename As Ptr, mode As Ptr) As Ptr		  		  // BZFILE *BZ2_bzWriteOpen( int *bzerror, FILE *f, int blockSize100k, int verbosity, int workFactor );		  Soft Declare Function BZ2_bzWriteOpen Lib kLib (ByRef error As Integer, file As Ptr, _		  blkSz100k As Integer, verbosity As Integer, workFactor As Integer) As Ptr		  		  // void BZ2_bzWrite ( int *bzerror, BZFILE *b, void *buf, int len );		  Soft Declare Function BZ2_bzWrite Lib kLib (ByRef error As Integer, bzfile As Ptr, _		  buffer As Ptr, Length As Integer) As Integer		  		  // void BZ2_bzWriteClose( int *bzerror, BZFILE* f, int abandon, unsigned int* nbytes_in, unsigned int* nbytes_out );		  Soft Declare Sub BZ2_bzWriteClose Lib kLib (ByRef error As Integer, bzfile As Ptr, _		  abandon As Integer, ByRef nbytes_in As Integer, ByRef nbytes_out As Integer)		  		  Dim t1, t2 As Double		  Dim bs As BinaryStream		  Dim f, filename, mode, b, buf As MemoryBlock		  Dim nBuf, bzerror, nWritten As Integer		  Dim nbytes_in, nbytes_out As Integer		  		  t1=Microseconds		  bs=BinaryStream.Open(fileIn, False)		  		  filename=fileOut+ChrB(0)		  logMsg("filename: "+filename.CString(0))		  		  mode="w"		  f=fopen(filename, mode)		  		  b = BZ2_bzWriteOpen(bzerror, f, 9, 0, 0)		  		  While Not bs.EOF		    buf=bs.Read(102400)		    nBuf=buf.Size		    //* get data to write into buf, and set nBuf appropriately *//		    nWritten = BZ2_bzWrite(bzerror, b, buf, nBuf)		    'logMsg("Wrote "+Format(nBuf, "###,###")+" bytes... ["+Str(nWritten)+"]")		    'logMsg("bzerror: "+Str(bzerror))		  Wend		  bs=Nil		  BZ2_bzWriteClose(bzerror, b, 0, nbytes_in, nbytes_out)		  'logMsg("bzerror: "+Str(bzerror))		  		  t2=Microseconds		  		  logMsg("Length of original file: "+Format(nbytes_in, "###,###"))		  logMsg("Length of compressed file: "+Format(nbytes_out, "###,###"))		  logMsg("Time spent: "+Format(t2-t1, "###,###")+"µs")		  logMsg("--------------------------------------")		  		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub Decompress(fileIn As String, fileOut As FolderItem)		  // FILE * fopen ( const char * filename, const char * mode );		  Soft Declare Function fopen Lib kStdLib (filename As Ptr, mode As Ptr) As Ptr		  		  // BZFILE *BZ2_bzReadOpen( int *bzerror, FILE *f, int verbosity, int small, void *unused, int nUnused );		  Soft Declare Function BZ2_bzReadOpen Lib kLib (ByRef error As Integer, file As Ptr, _		  verbosity As Integer, small As Integer, unused As Ptr, nUnused As Integer) As Ptr		  		  // int BZ2_bzRead ( int *bzerror, BZFILE *b, void *buf, int len );		  Soft Declare Function BZ2_bzRead Lib kLib (ByRef error As Integer, bzfile As Ptr, _		  buffer As Ptr, Length As Integer) As Integer		  		  // void BZ2_bzReadClose ( int *bzerror, BZFILE *b );		  Soft Declare Sub BZ2_bzReadClose Lib kLib (ByRef error As Integer, bzfile As Ptr)		  		  Dim t1, t2 As Double		  Dim bs As BinaryStream		  Dim f, filename, mode, b, buf, unused As MemoryBlock		  Dim nBuf, bzerror, nWritten As Integer		  		  t1=Microseconds		  bs=bs.Create(fileOut, True)		  		  buf=New MemoryBlock(100000)		  unused=New MemoryBlock(4)		  filename=fileIn+ChrB(0)		  mode="r"		  f = fopen(filename, mode)		  logMsg("filename: "+filename.CString(0))		  		  b = BZ2_bzReadOpen (bzerror, f, 0, 0, unused, 0)		  		  bzerror = BZ_OK		  while (bzerror=BZ_OK)		    nBuf = BZ2_bzRead(bzerror, b, buf, 100000)		    'logMsg("Read "+Format(nBuf, "###,###")+" bytes...")		    'logMsg("bzerror: "+Str(bzerror))		    if (bzerror=BZ_OK or (bzerror=BZ_STREAM_END and nBuf>0)) Then bs.Write buf.StringValue(0, nBuf)		  Wend		  if bzerror<>BZ_STREAM_END Then		    //* handle error *//		  End If		  BZ2_bzReadClose (bzerror, b)		  		  t2=Microseconds		  		  logMsg("Time spent: "+Format(t2-t1, "###,###")+"µs")		  logMsg("--------------------------------------")		  		End Sub	#tag EndMethod	#tag Constant, Name = BZ_CONFIG_ERROR, Type = Double, Dynamic = False, Default = \"-9", Scope = Public	#tag EndConstant	#tag Constant, Name = BZ_DATA_ERROR, Type = Double, Dynamic = False, Default = \"-4", Scope = Public	#tag EndConstant	#tag Constant, Name = BZ_DATA_ERROR_MAGIC, Type = Double, Dynamic = False, Default = \"-5", Scope = Public	#tag EndConstant	#tag Constant, Name = BZ_FINISH_OK, Type = Double, Dynamic = False, Default = \"3", Scope = Public	#tag EndConstant	#tag Constant, Name = BZ_FLUSH_OK, Type = Double, Dynamic = False, Default = \"2", Scope = Public	#tag EndConstant	#tag Constant, Name = BZ_IO_ERROR, Type = Double, Dynamic = False, Default = \"-6", Scope = Public	#tag EndConstant	#tag Constant, Name = BZ_MEM_ERROR, Type = Double, Dynamic = False, Default = \"-3", Scope = Public	#tag EndConstant	#tag Constant, Name = BZ_OK, Type = Double, Dynamic = False, Default = \"0", Scope = Public	#tag EndConstant	#tag Constant, Name = BZ_OUTBUFF_FULL, Type = Double, Dynamic = False, Default = \"-8", Scope = Public	#tag EndConstant	#tag Constant, Name = BZ_PARAM_ERROR, Type = Double, Dynamic = False, Default = \"-2", Scope = Public	#tag EndConstant	#tag Constant, Name = BZ_RUN_OK, Type = Double, Dynamic = False, Default = \"1", Scope = Public	#tag EndConstant	#tag Constant, Name = BZ_SEQUENCE_ERROR, Type = Double, Dynamic = False, Default = \"-1", Scope = Public	#tag EndConstant	#tag Constant, Name = BZ_STREAM_END, Type = Double, Dynamic = False, Default = \"4", Scope = Public	#tag EndConstant	#tag Constant, Name = BZ_UNEXPECTED_EOF, Type = Double, Dynamic = False, Default = \"-7", Scope = Public	#tag EndConstant	#tag Constant, Name = kLib, Type = String, Dynamic = False, Default = \"/usr/lib/libbz2.dylib", Scope = Public	#tag EndConstant	#tag Constant, Name = kStdLib, Type = String, Dynamic = False, Default = \"/usr/lib/libc.dylib", Scope = Public	#tag EndConstant	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Class#tag EndClass